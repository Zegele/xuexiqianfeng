1. go run
专门用来运行命令源码文件的命令。
注意：这个命令不是用来运行所有的go的源码文件。

go run 命令只能接受一个命令源码文件以及若干个库源码文件（必须同属于main包）作为文件参数，且不能接受测试源码文件。
他在执行时会检查源码文件的类型。
如果参数中有多个或者没有命令源码文件，
那么go run命令就只会打印错误提示并推出，不会继续执行。

2. go build 
主要用于测试编译。
在包的编译过程中，若有必要，会同时编译与之相关联的包。
	1. 如果是普通包，当你执行go build后，不会产生任何文件。
	2. 如果是main包，当执行go build后，会在当前目录下生产一个可执行文件。
	如果需要在$GOPATH/bin目录下生产相应的exe文件，需要执行go install或者go build -o 路径/可执行文件名。
	3. 如果某个文件夹下有多个文件，而你只想编译其中某一个文件，
	可以在go build之后加上文件名，
	例如go build a.go
	(否则，如果只写go build会编译该文件夹下所有的go文件)
	4. 可以指定便是输出的文件名。如，我们可以执行go build -o 可执行文件名
	默认情况是package名（非main包），
	或第一个源文件的文件名（main包）
	5. go build会忽略目录下以“_”或“.”开头的问价。
	6. 如果你的源代码针对不同的操作系统需要不同的处理，那么你可以根据不同的操作系统后缀来命名文件。 


3. go install
是用来编译并安装代码包或者源码文件的。
go install命令在内部实际上分成了两步操作：
第一步：生成结果文件（可执行文件或者.a包）
第二步：会把编译好的结果移到$GOPATH/pkg或者$GOPATH/bin。

可执行文件：一般是go install带main函数的go文件产生的，后函数入口，所有可以直接运行。
.a 应用包：一般是go install不包含mian函数的go文件产生的，没有函数入口，只能被调用。

go install命令如果后面不追加任何参数，他会把当前目录作为代码包并安装。
go install命令后如果跟了代码包导入路径作为参数，那么该代码包及其倚赖都会被安装。
go install命令后如果跟了命令源码问价以及相关库码文件作为参数的话，只有这个文件会被编译并安装。


4. go get
go get命令用于从远程代码仓库（如github）中下载并安装代码包。
注意：go get命令会把当前的代码包下载到$GOPATH中的第一个工作区的src目录中，并安装。

go get -x 包路径（这里也就是网址）
//-x 可以看到下载的详细信息

5. go doc
一个很强大的查看或查找文档的工具。

如何查看相应package的文档呢？
例如builtin包，那么执行go doc builtin
如果是http包，那么执行go doc net/http

查看有一个包里面的函数，如fmt Printf函数
go doc fmt Printf

查看相应的代码，
go doc -src fmt Print

通过命令在命令行执行go doc -http=:端口号（你自己设置）
如 go doc -http=:8080
然后在浏览器中打开127.0.0.1：8080，
你将会看到golang.org的本地copy版本，
通过它你可以查询pkg文档等其他内容，
如果你设置了GOPATH，在pkg分类下，不但会列出标准包的文档
还会列出你本地GOPATH中所有项目的相关文档，这对于经常被限制访问的用户来说是个不错的选择。