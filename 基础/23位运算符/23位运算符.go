package main

import "fmt"

func main() {
	/*
		位运算符：
		将数值转为二进制后，按位操作。
			按位&（按位与）：
				对应位的值如果都为1才为1， 有一个为0就为0

			按位|（按位或）：
				对应位的值如果都是0才为0， 有一个为1就为1

			异或^：
				二元： a^b
					对应位的值不同为1，相同为0
				一元： ^a
					按位取反：
					1 ——> 0
					0 ——> 1

			清空位： &^
					a &^ b
					对于b上的每个数值
					如果为0，则取a对应位上的数值
					如果为1，则该位就取0

			位移运算符：
			<< 左移 按位左移
			a << b 将a转为二进制，向左移b个位 也就是放大2的b次方

			>> 右移
			a >> b 将a转为二进制，向左移b个位
	*/

	a := 60
	b := 13
	/*
		a:60, 	0011 1100 //计算机二进制是 4位一空
		b:13, 	0000 1101

		&		0000 1100
		|		0011 1101
		a^b		0011 0001
		^b		1111 1111 ... 1111 0010 (64位)
		a &^ b	0011 0000
	*/
	fmt.Printf("a:%d, %b\n", a, a)
	fmt.Printf("b:%d, %b\n", b, b)

	res1 := a & b
	fmt.Println(res1) //12

	res2 := a | b
	fmt.Println(res2) //61

	res3 := a ^ b
	fmt.Println(res3) //49

	res4 := ^b
	fmt.Println(res4)

	res5 := a &^ b
	fmt.Println(res5)

	c := 8

	/*
		   1包的使用 : 	0000 ... 0000 1000 (64位) 	2的3次幂
		移动后	0000 ... 0010 0000		变为	2的5次幂
	*/
	res6 := c << 2 //左移2位，就是 *2*2， 一位就是2倍的关系
	fmt.Println(res6)

	res7 := c >> 2 //右移2位，就是 /2/2
	fmt.Println(res7)
	/*
		   1包的使用 : 	0000 ... 0000 1000 (64位) 	2的3次幂
		移动后	0000 ... 0000 0010		变为	2的1次幂
	*/
}
